//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UPC.TP2.WEB.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class BDCLINICAEntities : DbContext
    {
        public BDCLINICAEntities()
            : base("name=BDCLINICAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<T_BASE_FINANCIERA> T_BASE_FINANCIERA { get; set; }
        public DbSet<T_BASE_LEGAL> T_BASE_LEGAL { get; set; }
        public DbSet<T_BIEN> T_BIEN { get; set; }
        public DbSet<T_BITACORA_INCIDENCIA> T_BITACORA_INCIDENCIA { get; set; }
        public DbSet<T_COMPROBANTE> T_COMPROBANTE { get; set; }
        public DbSet<T_CONFIGURACION> T_CONFIGURACION { get; set; }
        public DbSet<T_EMPLEADO> T_EMPLEADO { get; set; }
        public DbSet<T_EMPRESA> T_EMPRESA { get; set; }
        public DbSet<T_EQUIPO_MEDICO> T_EQUIPO_MEDICO { get; set; }
        public DbSet<T_EQUIPO_USO> T_EQUIPO_USO { get; set; }
        public DbSet<T_ESPECIALIDAD_MEDICA> T_ESPECIALIDAD_MEDICA { get; set; }
        public DbSet<T_ESPECIALIDAD_SERVICIO> T_ESPECIALIDAD_SERVICIO { get; set; }
        public DbSet<T_ESTRATEGIA_COMERCIAL> T_ESTRATEGIA_COMERCIAL { get; set; }
        public DbSet<T_INMUEBLE> T_INMUEBLE { get; set; }
        public DbSet<T_INVESTIGACION_COMERCIAL> T_INVESTIGACION_COMERCIAL { get; set; }
        public DbSet<T_MANTENIMIENTO_EQUIPO> T_MANTENIMIENTO_EQUIPO { get; set; }
        public DbSet<T_MODELO> T_MODELO { get; set; }
        public DbSet<T_MUEBLE> T_MUEBLE { get; set; }
        public DbSet<T_PACIENTE> T_PACIENTE { get; set; }
        public DbSet<T_PERSONA> T_PERSONA { get; set; }
        public DbSet<T_PLAN_BASE_FINANCIERA> T_PLAN_BASE_FINANCIERA { get; set; }
        public DbSet<T_PLAN_BASE_LEGAL> T_PLAN_BASE_LEGAL { get; set; }
        public DbSet<T_PLAN_DE_SALUD> T_PLAN_DE_SALUD { get; set; }
        public DbSet<T_PLAN_ESPECIALIDADxSERVICIO> T_PLAN_ESPECIALIDADxSERVICIO { get; set; }
        public DbSet<T_PLAN_ESTRATEGIA_COMERCIAL> T_PLAN_ESTRATEGIA_COMERCIAL { get; set; }
        public DbSet<T_PLAN_MANTENIMIENTO> T_PLAN_MANTENIMIENTO { get; set; }
        public DbSet<T_PLAN_PACIENTE> T_PLAN_PACIENTE { get; set; }
        public DbSet<T_PROGRAMACION_MEDICA> T_PROGRAMACION_MEDICA { get; set; }
        public DbSet<T_PROYECTO_PLANSALUD> T_PROYECTO_PLANSALUD { get; set; }
        public DbSet<T_RESERVA_SERVICIO_SALUD> T_RESERVA_SERVICIO_SALUD { get; set; }
        public DbSet<T_SEGUIMIENTO> T_SEGUIMIENTO { get; set; }
        public DbSet<T_SERVICIO_SALUD> T_SERVICIO_SALUD { get; set; }
        public DbSet<T_SOLICITUD_MANTENIMIENTO> T_SOLICITUD_MANTENIMIENTO { get; set; }
        public DbSet<T_TECNICO_MANTENIMIENTO> T_TECNICO_MANTENIMIENTO { get; set; }
        public DbSet<T_TIPO_PERSONA> T_TIPO_PERSONA { get; set; }
        public DbSet<T_PERSONA_PLANSALUD> T_PERSONA_PLANSALUD { get; set; }
        public DbSet<T_PLAN_SERVICIO> T_PLAN_SERVICIO { get; set; }
        public DbSet<T_ESTRATEGIA_COMERCIAL_DETALLE> T_ESTRATEGIA_COMERCIAL_DETALLE { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
